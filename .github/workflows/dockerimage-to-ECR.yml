name: publish docker image to ecr

on: push

jobs:
  build-image:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Build and tag Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
          rev=$(git rev-parse --short HEAD)
          docker build -t ppe .
          docker tag ppe 244530008913.dkr.ecr.eu-west-1.amazonaws.com/candidate2043ecr:$rev
          
  deploy-image:
    runs-on: ubuntu-latest
    name: deploy built docker image
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Build and push Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
          rev=$(git rev-parse --short HEAD)
          docker rmi 244530008913.dkr.ecr.eu-west-1.amazonaws.com/candidate2043ecr:latest || true
          docker build -t ppe .
          docker tag ppe 244530008913.dkr.ecr.eu-west-1.amazonaws.com/candidate2043ecr:$rev
          docker tag ppe 244530008913.dkr.ecr.eu-west-1.amazonaws.com/candidate2043ecr:latest
          docker push 244530008913.dkr.ecr.eu-west-1.amazonaws.com/candidate2043ecr:$rev
          docker push 244530008913.dkr.ecr.eu-west-1.amazonaws.com/candidate2043ecr:latest
          

  terraform:
    name: "Terraform"
    needs: deploy-image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-1
#     CAN ALSO APPLY MORE ENV VARIABLES FOR FLAG VARIABLES CREATED LIKE
#     cpu, memory, access_role_arn_prefix, iam_role_name, iam_policy_name
#     we dont have to add these since they already have default values, so --auto-approve takes care of that on deployment
      IMAGE: 244530008913.dkr.ecr.eu-west-1.amazonaws.com/candidate2043ecr:latest
      PREFIX: candidate2043ars
 #    TF_LOG: trace
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: cd infra && terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: cd infra && terraform plan   -var="service_prefix=$PREFIX" -var="image=$IMAGE"  -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: cd infra && terraform apply -var="service_prefix=$PREFIX" -var="image=$IMAGE"  -auto-approve
        
    
    
  terraformdash:
    name: "Terraformdash"
    needs: deploy-image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      NOTIFICATION_MAIL: ${{ secrets.NOTIFICATION_MAIL}}
      AWS_REGION: eu-west-1
      IMAGE: 244530008913.dkr.ecr.eu-west-1.amazonaws.com/candidate2043ecr:latest
      PREFIX: candidate2043dashs
      STUDENT_NAME: candidate2043dashs
 #    TF_LOG: trace
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: cd dashinfra && terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: cd dashinfra && terraform plan -var="dashboard_name=$STUDENT_NAME" -var="alarm_email=$NOTIFICATION_MAIL" -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: cd dashinfra && terraform apply -var="dashboard_name=$STUDENT_NAME" -var="alarm_email=$NOTIFICATION_MAIL" -auto-approve
        